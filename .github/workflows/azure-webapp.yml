
permissions:
  contents: write

name: MRA.WebApi Azure Deployment

env:
  AZURE_WEBAPP_NAME: MRAWebApi20240716105924
  DOTNET_VERSION: '9'
  CSPROJ_PATH: './MRA.WebApi/MRA.WebApi.csproj'
  TEST_PROJECT_PATH: './MRA.UnitTests/MRA.UnitTests.csproj'
  TEST_RESULTS_PATH: './TestResults'
  COVERAGE_HTML_PATH: './TestResults/CoverageReport'

on:
  push:
    branches: [ "main", "refactor/test-project" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
          
      - name: Set up dependency caching for faster builds
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Install dependencies
        run: dotnet restore ${{env.CSPROJ_PATH}}
      
      - name: Create temporary appsettings.Local.json
        run: |
          echo "{}" > MRA.DependencyInjection/appsettings.Local.json
          
      - name: Build
        run: dotnet build ${{env.CSPROJ_PATH}} --configuration Release --no-restore

      - name: Run tests with coverage
        run: dotnet test ${{ env.TEST_PROJECT_PATH }} --no-build --configuration Release --collect:"XPlat Code Coverage" --results-directory ${{ env.TEST_RESULTS_PATH }}
        
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: ${{ env.TEST_RESULTS_PATH }}/

      - name: Install ReportGenerator
        run: dotnet tool install --global dotnet-reportgenerator-globaltool
    
      - name: Generate HTML coverage report
        run: reportgenerator "-reports:${{ env.TEST_RESULTS_PATH }}/**/*.xml" "-targetdir:${{ env.COVERAGE_HTML_PATH }}" "-reporttypes:Html"

      - name: Upload HTML coverage report
        uses: actions/upload-artifact@v4
        with:
          name: html-coverage-report
          path: ${{ env.COVERAGE_HTML_PATH }}/

      - name: Publish
        run: dotnet publish ${{env.CSPROJ_PATH}} -c Release -o ${{github.workspace}}/publish --no-build

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: .net-app
          path: ${{github.workspace}}/publish

      - name: Extract version from .csproj (PowerShell)
        id: extract-version
        shell: pwsh
        run: |
          [xml]$xml = Get-Content "${{ env.CSPROJ_PATH }}"
          $version = $xml.Project.PropertyGroup.Version
          Write-Output "Version is $version"
          "VERSION=$version" >> $env:GITHUB_ENV

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}
          
      - name: Create Git tag
        run: |
          git tag "v${{ env.VERSION }}"
          git push origin "v${{ env.VERSION }}"

  deploy:
    runs-on: windows-latest
    needs: build
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: .net-app

      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          slot-name: 'Production'
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          package: .

  deploy-coverage:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download coverage report artifact
        uses: actions/download-artifact@v4
        with:
          name: html-coverage-report

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: TestResults/CoverageReport/
