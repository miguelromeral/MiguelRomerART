@using MRA.Services.Firebase.Models
@using MRA.Web.Models.Art
@using MRA.Web.Models.Images
@model DetailsModel

@{
    var drawing = Model.Drawing;
    if (!string.IsNullOrEmpty(drawing?.Title))
    {
        ViewData["Title"] = drawing?.Title;
    }
    else if (!string.IsNullOrEmpty(drawing?.Name))
    {
        ViewData["Title"] = drawing?.Name;
    }
    else if (!string.IsNullOrEmpty(drawing?.ModelName))
    {
        ViewData["Title"] = drawing?.ModelName;
    }
    else if (!string.IsNullOrEmpty(drawing?.Id))
    {
        ViewData["Title"] = drawing?.Id;
    }
    else
    {
        ViewData["Title"] = "Details";
    }
}

@section Styles {
    <link href="~/css/site.css" rel="stylesheet" asp-append-version="true" />
    <link href="~/css/images.css" rel="stylesheet" asp-append-version="true" />
    <link href="~/css/image-details.css" rel="stylesheet" asp-append-version="true" />
}



@if (drawing != null)
{
    if (!String.IsNullOrEmpty(drawing.Title))
    {
        <h1 class="mr-image-page-title">@drawing.Title</h1>
    }

    <div class="row">

        @if (!String.IsNullOrEmpty(Model.Drawing.Name) && !String.IsNullOrEmpty(Model.Drawing.ModelName))
        {
            <h3 class="mr-image-detail-title">
                @Model.Drawing.Name
            </h3>
            <h5 class="mr-image-detail-subtitle">@Model.Drawing.ModelName</h5>
        }
        else if (!String.IsNullOrEmpty(Model.Drawing.Name))
        {
            <h3 class="mr-image-detail-title">
                @Model.Drawing.Name
            </h3>
        }
        else if (!String.IsNullOrEmpty(Model.Drawing.ModelName))
        {
            <h3 class="mr-image-detail-title">
                @Model.Drawing.ModelName
            </h3>
        }


    </div>
    <div class="row">
        <div class="col-sm-12 col-md-6 col-lg-4 mb-2">

            <div class="mr-first-column-image">
                <div id="divImgFull" class="mr-img-full-container heart-rain @(drawing.Favorite ? "favorite" : "")" ondblclick="cheerDrawing(event)">
                    <img id="imgFull" src="@Model.Drawing.Url" class="mr-img-full" onerror="errorLoadingImage('@Model.Drawing.Id')" loading="lazy" decoding="async">

                    <div class="mr-error-load-placeholder" data-error-drawing-id="@Model.Drawing.Id">
                        <span class="emoji">🙃</span>
                        <span class="subtitle">Image Not Found</span>
                    </div>

                    <i id="iFavoriteIcon" class="bi bi-star-fill" title="One of my favorites drawings."></i>
                    <div id="divIconFullScreen" onclick="fullScreenImage()">
                        <i id="iFS" class="bi bi-fullscreen" title="Ver en pantalla completa"></i>
                        <i id="iFSe" class="bi bi-fullscreen-exit" title="Cerrar la pantalla completa"></i>
                    </div>
                </div>

                <div class="mr-stats-container">
                    <form id="cheerForm" asp-action="Cheer" asp-controller="Art"
                          data-ajax="true" data-ajax-method="POST"
                          data-ajax-begin="onBeginCheer" data-ajax-failure="OnFailureCheer"
                          data-ajax-success="onSuccessCheer" data-ajax-complete="onCompleteCheer">

                        <div class="mr-like-container">
                            <input type="hidden" name="id" value="@drawing.Id" />

                            <button id="btnCheer" type="button" class="btn btn-danger mr-like-button like-semaphore vibrate" onclick="cheerDrawing(event)">
                                <i id="iCheerIcon" class="bi bi-heart"></i> ¡ KUDOS !
                            </button>
                        </div>
                    </form>

                    <div class="mr-stats-item" title="Views">
                        <i class="bi bi-eye"></i>
                        <span>@(Drawing.FormatoLegible(drawing.Views + 1))</span>
                    </div>
                    <div class="mr-stats-item likes" title="Kudos">
                        <i class="bi bi-heart"></i>
                        <div id="divContainerLikes">
                            <div id="spLikesCounter">@(drawing.LikesHuman)</div>
                        </div>
                    </div>
                </div>
                <div class="mr-scores">
                    <div class="mr-scores-reviews">
                        <div class="mr-scores-critic-container" title="Puntuación del Artista">
                            <span class="mr-scores-critic @DetailsModel.GetClassScore(drawing.ScoreCritic)">
                                @(drawing.ScoreCritic == 0 ? "--" : drawing.ScoreCritic)
                            </span>
                            <div class="mr-score-image">
                                <img src="~/assets/images/miguel.jpeg" class="mr-chat-image-miguel" />
                            </div>
                        </div>
                        <div class="mr-scores-popular" title="Puntuación de los Usuarios">
                            <span id="spScoreUserVotes" class="mr-scores-popular-span @DetailsModel.GetClassScore(drawing.ScorePopularHuman)">
                                @(drawing.ScorePopularHuman == 0 ? "--" : drawing.ScorePopularHuman)
                            </span>
                            <div id="divScorePopular" class="mr-scores-popular-votes" title="Votos de Usuarios">
                                <span id="spNumberUserVotes">
                                    @drawing.VotesPopular
                                </span>
                                <span>
                                    voto@(drawing.VotesPopular != 1 ? "s" : "")
                                </span>
                            </div>
                        </div>
                        <button id="btnOpenVoteForm" class="btn mr-custom-btn" type="button" data-bs-toggle="collapse" data-bs-target="#cardVoteForm"
                                aria-expanded="false" aria-controls="cardVoteForm">
                            Votar
                        </button>
                    </div>
                    <div class="mr-scores-form mt-2" id="containerCollapseVoteForm">
                        <div id="cardVoteForm" class="card card-body collapse">
                        
                        <form id="voteForm" asp-action="Vote" asp-controller="Art"
                              data-ajax="true" data-ajax-method="POST"
                              data-ajax-begin="onBeginVote" data-ajax-failure="OnFailureVote"
                              data-ajax-success="onSuccessVote" data-ajax-complete="onCompleteVote">
                            <input type="hidden" name="id" value="@drawing.Id" />

                                <div id="divLabelVote">
                                    <span>Seleccione una puntuación</span>
                                    <span id="spScoreUser" class="good">70</span>
                            </div>

                            <input type="range" name="score" class="mr-custom-range form-range" min="1" max="100" step="1" value="70" id="rScoreUser" oninput="onChangeRangeVote(event)">
                            


                            <button id="btnVote" type="button" class="mt-2 btn btn-success vibrate" onclick="voteDrawing(event)">
                                <i id="iCheerIcon" class="bi bi-send-plus"></i> Envia tu Voto Ahora
                            </button>

                            
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-sm-12 col-md-6 col-lg-4">
            <div class="mr-social-container">

                @if (!String.IsNullOrEmpty(drawing.SpotifyTrackId))
                {
                    <iframe
                            src="https://open.spotify.com/embed/track/@(drawing.SpotifyTrackId)?utm_source=generator"
                            width="100%"
                            height="152"
                            allowfullscreen="true"
                            allow="autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture" loading="lazy"></iframe>
                }
                <div class="mr-chat-container" style="width: 100%;">
                    @{
                        var comments = drawing.ListComments;
                        for (int count = 0; count < comments.Count; count++)
                        {
                            var last = count + 1 == comments.Count;
                                <div class="mr-chat-row">
                                    <div class="mr-chat-message-container slide-top">
                                        <div class="mr-chat-message @(last ? "last" : "")">
                                            @Html.Raw(comments[count])
                                        </div>
                                    </div>
                                    <div class="mr-chat-image">
                                        @if (last)
                                    {
                                            <img src="~/assets/images/miguel.jpeg" class="mr-chat-image-miguel slide-top" />
                                    }
                                    </div>
                                </div>
                        }
                    }
                </div>
            </div>
        </div>

        <div class="col-sm-12 col-md-12 col-lg-4 mr-row-pros-cons">
            <div class="mr-social-container" style="width: 100%;">
                <div class="mr-chat-container" style="width: 100%;">
                    @if (!String.IsNullOrEmpty(drawing.CommentPros))
                    {
                        <div class="mr-chat-row likes">
                            <div class="mr-chat-message-container slide-top delay1s">
                                @foreach (var comment in drawing.ListCommentPros)
                                {
                                    <div class="mr-chat-message">
                                        <span>@Html.Raw(comment)</span>
                                    </div>
                                }
                            </div>

                            <div class="mr-chat-image mr-chat-icon" title="Puntos buenos y cosas que me gustan">
                                <i class="bi bi-hand-thumbs-up slide-top delay1s"></i>
                            </div>
                        </div>
                    }
                </div>
            </div>

            <div class="mr-social-container" style="width: 100%;">

                <div class="mr-chat-container" style="width: 100%;">
                    @if (!String.IsNullOrEmpty(drawing.CommentCons))
                    {
                        <div class="mr-chat-row dislikes">
                            <div class="mr-chat-message-container slide-top delay2s">
                                @foreach (var comment in drawing.ListCommentCons)
                                {
                                    <div class="mr-chat-message">
                                        <span>@comment</span>
                                    </div>
                                }
                            </div>
                            <div class="mr-chat-image mr-chat-icon" title="Puntos negativos y cosas a mejorar">
                                <i class="bi bi-hand-thumbs-down slide-top delay2s"></i>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
    <div class="row mb-2 mt-2">


        <div class="col-sm-12 col-sm-12 col-md-12 mb-2 mt-2">
            <h4>Detalles</h4>
        </div>

        @{

            await Html.RenderPartialAsync("_DetailsSection", new DetailsSectionModel()
                {
                    Title = "📅 Fecha",
                    RawText = String.IsNullOrEmpty(drawing.Date) ? "No Date Known" : drawing.FormattedDate
                });

            await Html.RenderPartialAsync("_DetailsSection", new DetailsSectionModel()
                {
                    Title = "🕓 Tiempo (estimado)",
                    RawText = drawing.TimeHuman
                });

            await Html.RenderPartialAsync("_DetailsSection", new DetailsSectionModel()
                {
                    Title = "🖌 Estilo",
                    RawText = drawing.TypeName
                });

            if (drawing.Software > 0)
            {

                await Html.RenderPartialAsync("_DetailsSection", new DetailsSectionModel()
                    {
                        Title = "💻 Software",
                        RawText = drawing.SoftwareName
                    });
            }

            if (drawing.Paper > 0)
            {

                await Html.RenderPartialAsync("_DetailsSection", new DetailsSectionModel()
                    {
                        Title = "📄 Tamaño de Papel",
                        RawText = drawing.PaperHuman
                    });
            }

            if (drawing.ProductType > 0 && !String.IsNullOrEmpty(drawing.ProductName))
            {
                var textoTitulo = "Temática";
                switch (drawing.ProductType)
                {
                    case 1:
                        textoTitulo = "🎮 Videojuego";
                        break;
                    case 2:
                        textoTitulo = "🎞 Actor/Actriz";
                        break;
                    case 3:
                        textoTitulo = "🎙 Cantante";
                        break;
                    case 4:
                        textoTitulo = "⚽ Deporte";
                        break;
                    default:
                        textoTitulo = "Temática";
                        break;
                }

                await Html.RenderPartialAsync("_DetailsSection", new DetailsSectionModel()
                    {
                        Title = textoTitulo,
                        RawText = drawing.ProductName
                    });
            }

            if (!String.IsNullOrEmpty(drawing.ModelName))
            {

                await Html.RenderPartialAsync("_DetailsSection", new DetailsSectionModel()
                    {
                        Title = "👤 Modelo",
                        RawText = drawing.ModelName
                    });
            }

            if (!String.IsNullOrEmpty(drawing.ReferenceUrl))
            {

                await Html.RenderPartialAsync("_DetailsSection", new DetailsSectionModel()
                    {
                        Title = "🖼 Referencia",
                        RawText = $"<a href=\"{drawing.ReferenceUrl}\" target=\"_blank\">Abrir en nueva pestaña</a>"
                    });
            }

            if(drawing.Tags.Count > 0){
                await Html.RenderPartialAsync("_DetailsSection", new DetailsSectionModel()
                    {
                        Title = "🏷 Etiquetas",
                        Tags = true,
                        Capitalize = false,
                        RawText = string.Join(";",drawing.Tags.OrderBy(x => x))
                    });
            }
        }
    </div>

        }
else
{
<h6>Not Found</h6>
}

@section Scripts {
    <script src="~/js/art-gallery.js" asp-append-version="true"></script>

    <script asp-append-version="true">
        function fullScreenImage() {
            $("#divImgFull").toggleClass("fullscreen");
        }
    </script>
}